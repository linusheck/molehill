// Simplified model of a mars rover
// Encoding by Tim Quatmann and Sebastian Junges
// RWTH Aachen University

pomdp


const int num_tasks = 4;

// Energy (in percent)
//const double energy_low = 0.99;
//const double energy_medium = 0.95;
//const double energy_high = 0.9; 

const int energy_low;
const int energy_low_MIN;
const int energy_low_MAX;
const int energy_medium;
const int energy_medium_MIN;
const int energy_medium_MAX;
const int energy_high;
const int energy_high_MIN;
const int energy_high_MAX;

// Scientific Value
//const int value_low = 2;
//const int value_medium = 10;
//const int value_high = 30;

const int value_low;
const int value_low_MIN;
const int value_low_MAX;
const int value_medium;
const int value_medium_MIN;
const int value_medium_MAX;
const int value_high;
const int value_high_MIN;
const int value_high_MAX;

// Success probabilities
//const double task1_success_pr = 0.5;
//const double task2_success_pr = 0.6;
//const double task3_success_pr = 0.8;
//const double task4_success_pr = 0.2;

const int task1_success_pr;
const int task1_success_pr_MIN;
const int task1_success_pr_MAX;
const int task2_success_pr;
const int task2_success_pr_MIN;
const int task2_success_pr_MAX;
const int task3_success_pr;
const int task3_success_pr_MIN;
const int task3_success_pr_MAX;
const int task4_success_pr;
const int task4_success_pr_MIN;
const int task4_success_pr_MAX;

formula low_time_task = (task=2 | task=3);
formula medium_time_task = false;
formula high_time_task = (task=1 | task=4);

formula low_energy_task = (task=1 | task=3);
formula medium_energy_task = (task=2);
formula high_energy_task = (task=4);

formula low_value_task = (task=3);
formula medium_value_task = (task=1 | task=2);
formula high_value_task = (task=4);

module rover
	// The current task (0 means no task)
	task : [0..num_tasks] init 0;
	success : bool init false;
	
	[task1] task=0 -> task1_success_pr*0.01 : (task'=1) & (success'=true) + (1-task1_success_pr*0.01) : (task'=1) & (success'=false);
	[task2] task=0 -> task2_success_pr*0.01 : (task'=2) & (success'=true) + (1-task2_success_pr*0.01) : (task'=2) & (success'=false);
	[task3] task=0 -> task3_success_pr*0.01 : (task'=3) & (success'=true) + (1-task3_success_pr*0.01) : (task'=3) & (success'=false);
	[task4] task=0 -> task4_success_pr*0.01 : (task'=4) & (success'=true) + (1-task4_success_pr*0.01) : (task'=4) & (success'=false);
	[task_done] task>0 -> (task'= 0) & (success'=false);

endmodule


module battery
	increased_energy : bool init false;
	empty: bool init false;
	
	[task1] !empty -> 1/2 : (increased_energy' = false) + 1/2 : (increased_energy' = true);
	[task2] !empty -> 1/2 : (increased_energy' = false) + 1/2 : (increased_energy' = true);
	[task3] !empty -> 1/2 : (increased_energy' = false) + 1/2 : (increased_energy' = true);
	[task4] !empty -> 1/2 : (increased_energy' = false) + 1/2 : (increased_energy' = true);

	[task_done] low_energy_task & !increased_energy ->
		energy_low*0.001 : (increased_energy' = false) + (1-energy_low*0.001) : (empty'=true) & (increased_energy' = false);
	[task_done] (low_energy_task & increased_energy) | (medium_energy_task & !increased_energy) ->
		energy_medium*0.001 : (increased_energy' = false) + (1-energy_medium*0.001) : (empty'=true) & (increased_energy' = false);
	[task_done] (medium_energy_task & increased_energy) | high_energy_task ->
		energy_high*0.001 : (increased_energy' = false) + (1-energy_high*0.001) : (empty'=true) & (increased_energy' = false);
endmodule


const int val_goal = 50;

module value
	val : [0..val_goal] init 0;
	[task_done] low_value_task    -> (val'=min(val_goal,val + (success ? value_low : 0)));
	[task_done] medium_value_task -> (val'=min(val_goal,val + (success ? value_medium : 0)));
	[task_done] high_value_task   -> (val'=min(val_goal,val + (success ? value_high : 0)));
endmodule

formula goal = val = val_goal;
label "goal" = goal;

observable "increased_energy" = increased_energy;
observable "task" = task;
observable "success" = success;
observable "goal" = goal;
observable "empty" = empty;

// time (minutes)
const int time_low = 5;
const int time_medium = 10;
const int time_high = 20;

rewards "time"
	[task_done] low_time_task : time_low;
	[task_done] medium_time_task : time_medium;
	[task_done] high_time_task : time_high;
endrewards

//rewards "energy"
//	[task_done] low_energy_task & !increased_energy : energy_low;
//	[task_done] low_energy_task &  increased_energy : energy_medium;
//	[task_done] medium_energy_task & !increased_energy : energy_medium;
//	[task_done] medium_energy_task &  increased_energy : energy_high;
//	[task_done] high_energy_task & !increased_energy : energy_high;
//	[task_done] high_energy_task &  increased_energy : energy_high;
//endrewards

